import asyncio
import random
from telethon import TelegramClient, events
from telethon.tl.types import DocumentAttributeVideo

api_id = 0 # –∑–¥–µ—Å—å api_id (–≤–∑—è—Ç—å –≤ https://telegram.org/)
api_hash = "0" # –∑–¥–µ—Å—å api_hash (–≤–∑—è—Ç—å –≤ https://telegram.org/)
bot_username = "bibinto_bot"
second_bot = "anonimnyi_chatbot"  # —é–∑–µ—Ä–Ω–µ–π–º –ª—é–±–æ–≥–æ –¥—Ä—É–≥–æ–≥–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —á–∞—Ç –±–æ—Ç–∞
alert_user_id = 0 # –∑–¥–µ—Å—å user_id —Å–≤–æ–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –≤ –±–∏–±–∏–Ω—Ç–æ

client = TelegramClient("userbot_session", api_id, api_hash)

def is_photo_or_video(msg):
    if msg.photo or msg.video:
        return True
    if msg.document:
        if getattr(msg.document, "mime_type", "").startswith("video/"):
            return True
        for attr in msg.document.attributes:
            if isinstance(attr, DocumentAttributeVideo):
                return True
    return False

# –±–∏–±–∏–Ω—Ç–æ
@client.on(events.NewMessage(chats=bot_username, incoming=True))
async def handler(event):
    text = event.raw_text or ""
    if "–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã" in text:
        try:
            await client.send_message(alert_user_id, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
        except Exception:
            pass
    elif "–ö–æ–∞–ª–∞ –Ω–∞–∫—É—à–∞–ª–∞—Å—å —Ç–≤–æ–∏—Ö –æ—Ü–µ–Ω–æ–∫" in text:
        try:
            await client.send_message(alert_user_id, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")
            await client.send_message(event.chat_id, f"‚≠êÔ∏è–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?")
        except Exception:
            pass


    if is_photo_or_video(event.message):
        if "‚òùÔ∏è–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ü–µ–Ω—â–∏–∫–∞‚òùÔ∏è" in text:
            await asyncio.sleep(5)
            await client.send_message(event.chat_id, f"‚≠êÔ∏è–ö—Ç–æ –º–µ–Ω—è –æ—Ü–µ–Ω–∏–ª?")
            return
        await asyncio.sleep(3)
        choice = random.choice(["9", "8", "9", "10"])
        try:
            await client.send_message(event.chat_id, choice)
        except Exception:
            await client.send_message(alert_user_id, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

# –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç
@client.on(events.NewMessage(chats=second_bot, incoming=True))
async def second_bot_handler(event):
    text = event.raw_text or ""

    if "–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!" in text:
        await asyncio.sleep(2)
        await client.send_message(second_bot, "—è –¥ 17, tg —Å–≤–æ–π—Ç–≥")
        await asyncio.sleep(1)
        await client.send_message(second_bot, "/next")

    elif "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞." in text:
        await asyncio.sleep(3)
        await client.send_message(second_bot, "/next")
    elif "–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø—Ä–µ—Ä–≤–∞–ª –¥–∏–∞–ª–æ–≥" in text:
        await asyncio.sleep(2)
        await client.send_message(second_bot, "/next")

async def auto_sender1(): # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ –≤ —Å–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π 18+ —á–∞—Ç —Ç–≥
    while True:
        try:
            await client.send_message(-1001807169139, "üîû –ø—Ä–∏–≤–µ—Ç, –º–Ω–µ N –∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n–≤—Å–µ –µ—Å—Ç—å –≤ –º–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, –∂–¥—É —Ç–µ–±—è!!!")
        except Exception:
            pass
        await asyncio.sleep(5)

async def auto_sender2(): # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∂–¥—ã–µ 20 —Å–µ–∫—É–Ω–¥ –≤–æ –≤—Ç–æ—Ä–æ–π 18+ —á–∞—Ç —Ç–≥
    while True:
        try:
            await client.send_message(-1002766517600, "üîû –ø—Ä–∏–≤–µ—Ç, –º–Ω–µ N –∏ —É –º–µ–Ω—è –µ—Å—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º\n\n–≤—Å–µ –µ—Å—Ç—å –≤ –º–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ, –∂–¥—É —Ç–µ–±—è!!!")
        except Exception:
            pass
        await asyncio.sleep(20)

@client.on(events.NewMessage(outgoing=True, pattern=r'^gte1$')) # –∑–∞—Ö–æ–¥–∏—Ç–µ –≤ –Ω—É–∂–Ω—ã–π —á–∞—Ç, –ø–∏—à–∏—Ç–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ gte1 –∏ —É –≤–∞—Å –≤ –∫–æ–Ω—Å–æ–ª–∏ –ø–æ—è–≤–∏—Ç—Å—è id —á–∞—Ç–∞
async def get_chat_id_handler(event):
    print(f"[chat_id] {event.chat_id}")

if __name__ == "__main__":
    client.start()
    client.loop.create_task(auto_sender1())
    client.loop.create_task(auto_sender2())
    client.run_until_disconnected()
